* {
 border: 1px solid Gray;
}

body {
  background-color: #FFF;
  margin: 0;
  padding: 0px 60px;
}

.header {
  background-color: #466995;
  border-bottom: 1px solid #466995;
  overflow-y: auto;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 10000;
}

ul {
  margin: 30px auto;
  text-align: center;
}

li {
  color: #FFF;
  display: inline-block;
  font-family: 'Oswald', sans-serif;
  font-size: 16px;
  text-align: left;
  font-weight: 300;
  text-transform: uppercase;
  padding: 0 40px;
}

li:hover {
  color: #DBE9EE;
}

h1 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 32px;
  font-weight: 300;
  text-transform: uppercase;
}

h2 {
  color: #333;
  font-family: 'Varela Round', sans-serif;
  font-size: 26px;
  font-weight: 100;
  margin: 0 auto 40px auto;
  /*
  The clear property specifies how elements should behave when they bump into each other on the page.
  It can take on one of the following values:
      left — the left side of the element will not touch any other element within the same containing element.
      right — the right side of the element will not touch any other element within the same containing element.
      both — neither side of the element will touch any other element within the same containing element.
      none — the element can touch either side.
  */
  clear: left;
}

h3 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 18px;
  text-align: center;
  font-weight: 700;
  text-transform: uppercase;
}

h4 {
  color: #466995;
  font-family: 'Oswald', sans-serif;
  font-size: 18px;
  font-weight: 300;
  letter-spacing: 2px;
  text-align: center;
  text-transform: uppercase;
  clear: left;
}

p {
  color: #333;
  font-family: 'Varela Round', sans-serif;
  font-size: 18px;
}

/*
    The default position of an element can be changed by setting its 'position' property.
    The position property can take one of four values:
        static - the default value (it does not need to be specified)

        relative - this value allows you to position an element relative to its default
            static position on the web page. Actually the div has been positioned using two
            of the four offset properties. The valid offset properties are:
                 top - moves the element down.
                 bottom - moves the element up.
                 left - moves the element right.
                 right - moves the element left.
            Units for offset properties can be specified in pixels, ems, or percentages.

        absolute - When an element's position is set to absolute all other elements on the
            page will ignore the element and act like it is not present on the page.
            Offset for the absolute positioning (top, left, bottom, right, like the relative
            positioning) is moving the element from the left-top corner of the page view.

        fixed - fix an element to a specific position on the page (regardless of user scrolling).
            Offset for the fixed positioning (top, left, bottom, right, like the relative
            positioning) is moving the element from the left-top corner of the current view.
*/

.welcome {
  background-color: #DBE9EE;
  box-sizing: border-box;
  padding: 40px;
  position: fixed;
  left: 0;
  top: 80px;
  text-align: center;
  width: 100%;
  /*
    The 'z-index' property controls how far "back" or how far "forward" an element
    should appear on the web page.
    The 'z-index' property accepts integer values.
    Depending on their values, the integers instruct the browser on the order in
    which elements should be displayed on the web page.
    Greater the value, lower the distance from the element to the screen.
    If two elements are overlapping by each other, the element with greater
    value of 'z-index' will be on top of the view.
    Note that 'z-index' property does not work on static elements.
  */
  z-index: 999;
}

.question {
  margin: 120px auto;
  position: relative;
  text-align: center;
  top: 240px;

}

.answer {
  border: 1px solid #466995;
  display: inline-block;
  height: 100px;
  margin: 20px;
  padding-top: 40px;
  width: 220px;
  /*
        If you're simply interested in moving an element as far left or as far right as
        possible on the page, you can use the 'float' property.
        The float property can be set to one of two values:
            left - this value will move, or float, elements as far left as possible;
            right - this value will move elements as far right as possible.
        Note: Floated elements must have a width specified, as in the example above.
        Otherwise, the element will assume the full width of its containing element,
        and changing the float value will not yield any visible results.
  */
  float: left;
  /*clear: left;*/
}

.answer:hover {
  background: #C0D6DF;
  color: #FFF;
}