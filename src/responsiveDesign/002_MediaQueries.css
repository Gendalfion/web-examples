html,
body {
  max-width: 1200px;
  margin: auto;
  font-family: "Space Mono", sans-serif;
  font-size: 18px;
  line-height: 1.4em;
  color: GhostWhite;
}

body {
  background-image: url("img/space.jpg");
  height: 100%;
  background-attachment: fixed;
  background-size: cover;
}

.clearfix {
  clear: both;
}

/* Title and Description */

.page-title {
  text-align: center;
  margin: auto;
  line-height: 2em;
}

.logo {
  height: 80px;
  width: 80px;
  background-image: url("img/spaceship.png");
  background-size: contain;
  background-repeat: no-repeat;
  display: inline-block;
  position: relative;
  top: 1em;
}

.page-title h1 {
  display: inline-block;
}

.main {
  text-align: center;
}

.page-description {
  font-size: 0.8rem;
  padding: 30px;
}

.learn-more {
  color: DarkOrange;
  text-decoration: none;
  display: block;
  margin: 25px 0 0 0;
  font-weight: bold;
}

/* Gallery */

.gallery {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 20px;
}

.gallery-item {
  margin: 20px;
}

.gallery-item .thumbnail {
  width: 240px;
  border: 2px solid GhostWhite;
  border-radius: 4px;
}

/* Footer Navigation */

nav {
  margin-top: 30px;
}

nav ul {
  display: block;
}

nav li {
  display: inline;
  margin: 0 20px 0 0;
  color: GhostWhite;
}

nav a {
  line-height: 60px;
  border: 1px solid GhostWhite;
  padding: 7px;
  border-radius: 4px;
  color: DarkOrange;
  text-decoration: none;
}

.contact-btn {
  cursor: pointer;
  margin: 20px 30px;
  text-align: center;
}

.contact-btn a:active {
  position: relative;
  bottom: 2px;
}

/*
    CSS uses media queries to adapt a website's content to different screen sizes. With media queries,
    CSS can detect the size of the current screen and apply different CSS styles depending on the width
    of the screen.



*/
@media only screen and (max-width: 480px), (orientation: portrait) {
/*
    @media — This keyword begins a media query rule and instructs the CSS compiler on how to
    parse the rest of the rule.

    only screen — Indicates what types of devices should use this rule. In early attempts to
    target different devices, CSS incorporated different media types (screen, print, handheld).
    The rationale was that by knowing the media type, the proper CSS rules could be applied. However,
    “handheld” and “screen” devices began to occupy a much wider range of sizes and having only one CSS
    rule per media device was not sufficient. screen is the media type always used for displaying content,
    no matter the type of device. The only keyword is added to indicate that this rule only applies to one
    media type (screen).

    and (max-width : 480px) — This part of the rule is called a media feature, and instructs the
    CSS compiler to apply the CSS styles to devices with a width of 480 pixels or smaller.
    Media features are the conditions that must be met in order to render the CSS within a media query.

    we used a comma (,) to separate multiple rules. The example above requires only one of the media
    features to be true for its CSS to apply.

    Note that the second media feature is orientation. The orientation media feature detects if the page
    has more width than height. If a page is wider, it's considered landscape, and if a page is taller,
    it's considered portrait.

    CSS rules are nested inside of the media query's curly braces. The rules will be applied when the
    media query is met.
*/
  .page-title {
    width: 270px;
  }
}

/*
    Specific screen sizes can be targeted by setting multiple width and height media features.
    'min-width' and 'min-height' are used to set the minimum width and minimum height, respectively.
    Conversely, 'max-width' and 'max-height' set the maximum width and maximum height, respectively.

    By using multiple widths and heights, a range can be set for a media query:
*/
@media only screen and (min-width: 320px) and (max-width: 480px) {
  .gallery-item .thumbnail {
    width: 95%;
  }
}

/*
    To target by resolution, we can use the min-resolution and max-resolution media features.
    These media features accept a resolution value in either dots per inch (dpi) or dots per centimeter (dpc).
*/
@media only screen and (min-resolution: 50dpi) {
    /* CSS for high resolution screens */
  .logo {
    background-image: url("img/spaceship@2x.png");
  }
}

/*
    The and operator can be used to require multiple media features.
    Therefore, we can use the and operator to require both a max-width of 480px
    and to have a min-resolution of 150dpi.
*/
@media only screen and (max-resolution: 150dpi) and (max-width: 480px) {
  .page-description {
    /*
    The website's text needs to be larger for users who have small, low resolution screens:
    */
    font-size: 20px;
  }
}

/*
    The points at which media queries are set are called breakpoints.
    Breakpoints are the screen sizes at which your web page does not appear properly.
    The dimensions at which the layout breaks or looks odd become your media query breakpoints.
    Within those breakpoints, we can adjust the CSS to make the page resize and reorganize.
    Different projects have different needs, and creating a responsive design should be no different.

    Check out list of breakpoints by device widths on image 'screen-sizes.png'. Use it as a reference of
    screen widths to test your website to make certain it looks great across a variety of devices.
*/
@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {

  .page-title, .page-description {
    float: left;
    width: 20em;
  }

  .page-description {
    text-align: left;
  }

}
